{"version":3,"sources":["Rectangle.js","Point.js","QuadTree.js"],"names":["Rectangle","x","y","width","height","point","range","Point","data","QuadTree","boundary","n","capacity","points","divided","halfWidth","halfHeight","NERect","NWRect","SERect","SWRect","northEast","northWest","southEast","southWest","p","insert","contains","length","push","subdivide","found","intersects","query","ctx","strokeStyle","beginPath","rect","stroke","draw"],"mappings":";;;;;;;AEAA;;AACA,IDDqBO,QACjB,eAAYN,CAAZ,EAAeC,CAAf,EAAkBM,IAAlB,EAAuB;AAAA;;AACnB,OAAKP,CAAL,GAASA,CAAT;AACA,IDHaD,GCGRE,CAAL,GAASA,CAAT;AACA,ADHN,OCGWM,IAAL,GAAYA,IAAZ,GDHMP,CAAZ,EAAeC,CAAf,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;ACI9B,ADJ8B;;AAC/B,SAAKH,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;IEHkBK,yBFKVJ,OAAO;AEJhB,AFKE,aAAOA,KAAK,CAACJ,CELHS,AFKH,IAAW,IELpB,CFKyBT,CELHU,AFKF,CELpB,EAAyB,AFKI,KAAKR,KAAzB,IACPE,KAAK,CAACJ,CAAN,GAAU,KAAKA,CAAL,GAAS,KAAKE,KADjB,IAEPE,KAAK,CAACH,CAAN,IAAW,KAAKA,CAAL,GAAS,KAAKE,MAFlB,IAGPC,KAAK,CAACH,CAAN,GAAU,KAAKA,CAAL,GAAS,KAAKE,MAHxB;AELuB,AFSxB;;AERC,SAAKM,QAAL,GAAgBA,QAAhB;AACA,SAAKE,QAAL,GAAgBD,CAAhB,UFSSL,OAAO;AERhB,AFSA,SETKO,IFSE,EETP,AFUEP,GEVY,EAAd,AFUO,CAACL,CAAN,GAAUK,KAAK,CAACH,KAAhB,GAAwB,KAAKF,CAAL,GAAS,KAAKE,KAAtC,IACAG,KAAK,CAACL,CAAN,GAAUK,KAAK,CAACH,KAAhB,GAAwB,KAAKF,CAAL,GAAS,KAAKE,KADtC,IAEAG,KAAK,CAACJ,CAAN,GAAUI,KAAK,CAACF,MAAhB,GAAyB,KAAKF,CAAL,GAAS,KAAKE,MAFvC,IAGAE,KAAK,CAACJ,CAAN,GAAUI,KAAK,CAACF,MAAhB,GAAyB,KAAKF,CAAL,GAAS,KAAKE,MAJlC,CAAP;AERA,AFcD,SEdMU,OAAL,GAAe,KAAf;AACD;;;;gCAEW;AACV,UAAMb,CAAC,GAAG,KAAKS,QAAL,CAAcT,CAAxB,CADU,CACiB;;AAC3B,UAAMC,CAAC,GAAG,KAAKQ,QAAL,CAAcR,CAAxB;AACA,UAAMa,SAAS,GAAG,KAAKL,QAAL,CAAcP,KAAd,GAAsB,CAAxC;AACA,UAAMa,UAAU,GAAG,KAAKN,QAAL,CAAcN,MAAd,GAAuB,CAA1C;AAEA,UAAMa,MAAM,GAAG,IAAIjB,kBAAJ,CAAcC,CAAC,GAAGc,SAAlB,EAA6Bb,CAAC,GAAGc,UAAjC,EAA6CD,SAA7C,EAAwDC,UAAxD,CAAf;AACA,UAAME,MAAM,GAAG,IAAIlB,kBAAJ,CAAcC,CAAC,GAAGc,SAAlB,EAA6Bb,CAAC,GAAGc,UAAjC,EAA6CD,SAA7C,EAAwDC,UAAxD,CAAf;AACA,UAAMG,MAAM,GAAG,IAAInB,kBAAJ,CAAcC,CAAC,GAAGc,SAAlB,EAA6Bb,CAAC,GAAGc,UAAjC,EAA6CD,SAA7C,EAAwDC,UAAxD,CAAf;AACA,UAAMI,MAAM,GAAG,IAAIpB,kBAAJ,CAAcC,CAAC,GAAGc,SAAlB,EAA6Bb,CAAC,GAAGc,UAAjC,EAA6CD,SAA7C,EAAwDC,UAAxD,CAAf;AAEA,WAAKK,SAAL,GAAiB,IAAIZ,QAAJ,CAAaQ,MAAb,EAAqB,KAAKL,QAA1B,CAAjB;AACA,WAAKU,SAAL,GAAiB,IAAIb,QAAJ,CAAaS,MAAb,EAAqB,KAAKN,QAA1B,CAAjB;AACA,WAAKW,SAAL,GAAiB,IAAId,QAAJ,CAAaU,MAAb,EAAqB,KAAKP,QAA1B,CAAjB;AACA,WAAKY,SAAL,GAAiB,IAAIf,QAAJ,CAAaW,MAAb,EAAqB,KAAKR,QAA1B,CAAjB;;AAdU,iDAgBI,KAAKC,MAhBT;AAAA;;AAAA;AAgBV,4DAA2B;AAAA,cAAlBY,CAAkB;AACzB,eAAKJ,SAAL,CAAeK,MAAf,CAAsBD,CAAtB,KAA4B,KAAKH,SAAL,CAAeI,MAAf,CAAsBD,CAAtB,CAA5B,IAAwD,KAAKF,SAAL,CAAeG,MAAf,CAAsBD,CAAtB,CAAxD,IAAoF,KAAKD,SAAL,CAAeE,MAAf,CAAsBD,CAAtB,CAApF;AACD;AAlBS;AAAA;AAAA;AAAA;AAAA;;AAoBV,WAAKZ,MAAL,GAAc,EAAd;AACA,WAAKC,OAAL,GAAe,IAAf;AACD;;;2BAEMT,OAAO;AACZ,UAAI,CAAC,KAAKK,QAAL,CAAciB,QAAd,CAAuBtB,KAAvB,CAAL,EAAoC;AAClC,eAAO,KAAP;AACD;;AACD,UAAI,KAAKQ,MAAL,CAAYe,MAAZ,GAAqB,KAAKhB,QAA9B,EAAwC;AACtC,aAAKC,MAAL,CAAYgB,IAAZ,CAAiBxB,KAAjB;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACL,YAAI,CAAC,KAAKS,OAAV,EAAmB;AACjB,eAAKgB,SAAL;AACD;;AACD,YAAI,KAAKT,SAAL,CAAeK,MAAf,CAAsBrB,KAAtB,KAAgC,KAAKiB,SAAL,CAAeI,MAAf,CAAsBrB,KAAtB,CAAhC,IAAgE,KAAKkB,SAAL,CAAeG,MAAf,CAAsBrB,KAAtB,CAAhE,IAAgG,KAAKmB,SAAL,CAAeE,MAAf,CAAsBrB,KAAtB,CAApG,EAAkI,OAAO,IAAP;AACnI;AACF;;;0BAEKC,OAAOyB,OAAO;AAClB,UAAI,CAACA,KAAL,EAAY;AACVA,QAAAA,KAAK,GAAG,EAAR;AACD;;AACD,UAAI,CAACzB,KAAK,CAAC0B,UAAN,CAAiB,KAAKtB,QAAtB,CAAL,EAAsC;AACpC,eAAOqB,KAAP;AACD,OAFD,MAEO;AACL,YAAI,KAAKjB,OAAT,EAAkB;AAChB,eAAKQ,SAAL,CAAeW,KAAf,CAAqB3B,KAArB,EAA4ByB,KAA5B;AACA,eAAKV,SAAL,CAAeY,KAAf,CAAqB3B,KAArB,EAA4ByB,KAA5B;AACA,eAAKP,SAAL,CAAeS,KAAf,CAAqB3B,KAArB,EAA4ByB,KAA5B;AACA,eAAKR,SAAL,CAAeU,KAAf,CAAqB3B,KAArB,EAA4ByB,KAA5B;AACD,SALD,MAKO;AAAA,sDACS,KAAKlB,MADd;AAAA;;AAAA;AACL,mEAA2B;AAAA,kBAAlBY,CAAkB;;AACzB,kBAAInB,KAAK,CAACqB,QAAN,CAAeF,CAAf,CAAJ,EAAuB;AACrBM,gBAAAA,KAAK,CAACF,IAAN,CAAWJ,CAAX;AACD;AACF;AALI;AAAA;AAAA;AAAA;AAAA;AAMN;AACF;;AACD,aAAOM,KAAP;AACD;;;yBAEIG,KAAK;AACRA,MAAAA,GAAG,CAACC,WAAJ,GAAkB,MAAlB;AACAD,MAAAA,GAAG,CAACE,SAAJ;AACAF,MAAAA,GAAG,CAACG,IAAJ,CAAS,KAAK3B,QAAL,CAAcT,CAAd,GAAkB,KAAKS,QAAL,CAAcP,KAAzC,EAAgD,KAAKO,QAAL,CAAcR,CAAd,GAAkB,KAAKQ,QAAL,CAAcN,MAAhF,EAAwF,KAAKM,QAAL,CAAcP,KAAd,GAAsB,CAA9G,EAAiH,KAAKO,QAAL,CAAcN,MAAd,GAAuB,CAAxI;AACA8B,MAAAA,GAAG,CAACI,MAAJ;;AAEA,UAAI,KAAKxB,OAAT,EAAkB;AAChB,aAAKO,SAAL,CAAekB,IAAf,CAAoBL,GAApB;AACA,aAAKZ,SAAL,CAAeiB,IAAf,CAAoBL,GAApB;AACA,aAAKX,SAAL,CAAegB,IAAf,CAAoBL,GAApB;AACA,aAAKV,SAAL,CAAee,IAAf,CAAoBL,GAApB;AACD;AACF","file":"QuadTree.991ff226.js","sourceRoot":"..","sourcesContent":["export default class Rectangle {\r\n  constructor(x, y, width, height) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n  contains(point) {\r\n    return point.x >= this.x - this.width && \r\n    point.x < this.x + this.width && \r\n    point.y >= this.y - this.height && \r\n    point.y < this.y + this.height;\r\n  }\r\n\r\n  intersects(range) {\r\n    return !(\r\n      range.x - range.width > this.x + this.width ||\r\n      range.x + range.width < this.x - this.width ||\r\n      range.y - range.height > this.y + this.height ||\r\n      range.y + range.height < this.y - this.height\r\n    );\r\n  }\r\n}\r\n","export default class Point{\r\n    constructor(x, y, data){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.data = data;\r\n    }\r\n}","import Rectangle from \"./Rectangle.js\";\r\nimport Point from \"./Point.js\";\r\n\r\nexport default class QuadTree {\r\n  constructor(boundary, n) {\r\n    this.boundary = boundary;\r\n    this.capacity = n;\r\n    this.points = [];\r\n    this.divided = false;\r\n  }\r\n\r\n  subdivide() {\r\n    const x = this.boundary.x; //setup some local vars to make code more readable (hopefully)\r\n    const y = this.boundary.y;\r\n    const halfWidth = this.boundary.width / 2;\r\n    const halfHeight = this.boundary.height / 2;\r\n\r\n    const NERect = new Rectangle(x + halfWidth, y - halfHeight, halfWidth, halfHeight);\r\n    const NWRect = new Rectangle(x - halfWidth, y - halfHeight, halfWidth, halfHeight);\r\n    const SERect = new Rectangle(x + halfWidth, y + halfHeight, halfWidth, halfHeight);\r\n    const SWRect = new Rectangle(x - halfWidth, y + halfHeight, halfWidth, halfHeight);\r\n\r\n    this.northEast = new QuadTree(NERect, this.capacity);\r\n    this.northWest = new QuadTree(NWRect, this.capacity);\r\n    this.southEast = new QuadTree(SERect, this.capacity);\r\n    this.southWest = new QuadTree(SWRect, this.capacity);\r\n\r\n    for (let p of this.points) {\r\n      this.northEast.insert(p) || this.northWest.insert(p) || this.southEast.insert(p) || this.southWest.insert(p);\r\n    }\r\n\r\n    this.points = [];\r\n    this.divided = true;\r\n  }\r\n\r\n  insert(point) {\r\n    if (!this.boundary.contains(point)) {\r\n      return false;\r\n    }\r\n    if (this.points.length < this.capacity) {\r\n      this.points.push(point);\r\n      return true;\r\n    } else {\r\n      if (!this.divided) {\r\n        this.subdivide();\r\n      }\r\n      if (this.northEast.insert(point) || this.northWest.insert(point) || this.southEast.insert(point) || this.southWest.insert(point)) return true;\r\n    }\r\n  }\r\n\r\n  query(range, found) {\r\n    if (!found) {\r\n      found = [];\r\n    }\r\n    if (!range.intersects(this.boundary)) {\r\n      return found;\r\n    } else {\r\n      if (this.divided) {\r\n        this.northWest.query(range, found);\r\n        this.northEast.query(range, found);\r\n        this.southWest.query(range, found);\r\n        this.southEast.query(range, found);\r\n      } else {\r\n        for (let p of this.points) {\r\n          if (range.contains(p)) {\r\n            found.push(p);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return found;\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.strokeStyle = \"#fff\";\r\n    ctx.beginPath();\r\n    ctx.rect(this.boundary.x - this.boundary.width, this.boundary.y - this.boundary.height, this.boundary.width * 2, this.boundary.height * 2);\r\n    ctx.stroke();\r\n\r\n    if (this.divided) {\r\n      this.northEast.draw(ctx);\r\n      this.northWest.draw(ctx);\r\n      this.southEast.draw(ctx);\r\n      this.southWest.draw(ctx);\r\n    }\r\n  }\r\n}\r\n"]}