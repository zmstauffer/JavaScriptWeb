{"version":3,"sources":["Circle.js"],"names":["Circle","x","y","r","rSquared","point","deltaX","deltaY","distance","range","Math","abs","edges","width","height"],"mappings":";;;;;;;;;;;;;IAAqBA;AACnB,kBAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AAAA;;AACnB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,QAAL,GAAgB,KAAKD,CAAL,GAAS,KAAKA,CAA9B;AACD;;;;6BAEQE,OAAO;AACd,UAAMC,MAAM,GAAGD,KAAK,CAACJ,CAAN,GAAU,KAAKA,CAA9B;AACA,UAAMM,MAAM,GAAGF,KAAK,CAACH,CAAN,GAAU,KAAKA,CAA9B;AACA,UAAMM,QAAQ,GAAG,SAAAF,MAAM,EAAI,CAAJ,CAAN,YAAcC,MAAd,EAAwB,CAAxB,CAAjB;AACA,aAAOC,QAAQ,IAAI,KAAKJ,QAAxB;AACD;;;+BAEUK,OAAO;AAChB;AACA,UAAMH,MAAM,GAAGI,IAAI,CAACC,GAAL,CAASF,KAAK,CAACR,CAAN,GAAU,KAAKA,CAAxB,CAAf;AACA,UAAMM,MAAM,GAAGG,IAAI,CAACC,GAAL,CAASF,KAAK,CAACP,CAAN,GAAU,KAAKA,CAAxB,CAAf;AACA,UAAMU,KAAK,GAAG,SAACN,MAAM,GAAGG,KAAK,CAACI,KAAhB,EAA0B,CAA1B,aAA+BN,MAAM,GAAGE,KAAK,CAACK,MAA9C,EAAyD,CAAzD,CAAd;AAEA,UAAIR,MAAM,GAAI,KAAKH,CAAL,GAASM,KAAK,CAACI,KAAzB,IAAmCN,MAAM,GAAI,KAAKJ,CAAL,GAASM,KAAK,CAACK,MAAhE,EAAyE,OAAO,KAAP,CANzD,CAMuE;;AACvF,UAAIR,MAAM,IAAIG,KAAK,CAACI,KAAhB,IAAyBN,MAAM,IAAIE,KAAK,CAACK,MAA7C,EAAqD,OAAO,IAAP,CAPrC,CAOkD;;AAClE,aAAOF,KAAK,IAAI,KAAKR,QAArB,CARgB,CAQe;AAChC","file":"Circle.35c2ec72.js","sourceRoot":"..","sourcesContent":["export default class Circle {\r\n  constructor(x, y, r) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.r = r;\r\n    this.rSquared = this.r * this.r;\r\n  }\r\n\r\n  contains(point) {\r\n    const deltaX = point.x - this.x;\r\n    const deltaY = point.y - this.y;\r\n    const distance = deltaX ** 2 + deltaY ** 2;\r\n    return distance <= this.rSquared;\r\n  }\r\n\r\n  intersects(range) {\r\n    //detects intersection between axis-aligned rectangle (range) and this circle\r\n    const deltaX = Math.abs(range.x - this.x);\r\n    const deltaY = Math.abs(range.y - this.y);\r\n    const edges = (deltaX - range.width) ** 2 + (deltaY - range.height) ** 2;\r\n\r\n    if (deltaX > (this.r + range.width) || deltaY > (this.r + range.height)) return false; //circle completely outside rectangle\r\n    if (deltaX <= range.width || deltaY <= range.height) return true; //circle center inside rectangle\r\n    return edges <= this.rSquared; //rectangle passes through circle, just not center of it\r\n  }\r\n}\r\n"]}